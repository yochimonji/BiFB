rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {

        function isAuthenticated() {
            return request.auth != null;
        }

        function isUserAuthenticated(userUid) {
            return isAuthenticated() && userUid == request.auth.uid;
        }

        function isValidProduct(product) {
            return product.size() == 8
                && product.keys().hasAll([
                    "productTitle", "productAbstract", "productIconUrl", "githubUrl", "productUrl", "tagList", "mainText", "userUid"
                ])
                && product.productTitle is string
                && product.productAbstract is string
                && product.productIconUrl is string
                && product.githubUrl is string
                && product.productUrl is string
                && product.tagList is list
                && product.tagList[0] is string
                && product.tagList.size() >= 0
                && product.tagList.size() <= 5
                && product.mainText is list
                && product.userUid is string;
        }

        function isValidTag(tag) {
            return tag.size() == 1
                && "num" in tag
                && tag.num is int
        }

        function isValidUserInfo(userInfo) {
            return userInfo.size() == 9
                && userInfo.keys().hasAll([
                    "name", "userIcon", "comment", "githubUrl", "twitterUrl", "otherUrl", "favoriteList", "feedbackList", "userUid"
                ])
                && userInfo.name is string
                && userInfo.userIcon is string
                && userInfo.comment is string
                && userInfo.githubUrl is string
                && userInfo.twitterUrl is string
                && userInfo.otherUrl is string
                && userInfo.favoriteList is list
                && userInfo.favoriteList[0] is string
                && userInfo.feedbackList is list
                && userInfo.feedbackList[0] is string
                && userInfo.userUid is string
        }

        // 非公開にするべき情報はないため読み取りは全て許可
        match /{document=**} {
            allow read: if true;
        }

        // match /feedback/{feedbackId} {
        //     allow read: if true;
        // }

        match /product/{productId} {
            allow write: if isValidProduct(request.resource.data)
                // バリデーション
                && isUserAuthenticated(request.resource.data.userUid)
                && request.resource.data.productTitle != ""
                && request.resource.data.productAbstract != ""
                && request.resource.data.productIconUrl.matches("https?://[\w!?/+\-_~=;.,*&@#$%()[\]]+")
                && (request.resource.data.githubUrl == ""
                    || request.resource.data.githubUrl.matches("https?://github.com/[\w!?/+\-_~=;.,*&@#$%()[\]]+"))
                && (request.resource.data.productUrl == ""
                    || request.resource.data.productUrl.matches("https?://[\w!?/+\-_~=;.,*&@#$%()[\]]+"));
            // FIXME: 本人以外の登録済みユーザーも削除可能のためisUserAuthenticatedを使いたい
            // 現在のFirestoreの構成ではuserUidの取得ができないため根本の構成から変更する必要あり
            allow delete: if isAuthenticated();
        }

        match /tag/{tagName} {
            allow write: if isAuthenticated()
                && isValidTag(request.resource.data)
                && request.resource.data.num > -1;
        }
        // TODO: validを先にする、urlをチェックする、コメント追加
        match /userInfo/{userUid} {
            allow create: if isUserAuthenticated(userUid)
                && isValidUserInfo(request.resource.data)
                && request.resource.data.comment == "よろしくお願いします。"
                && request.resource.data.githubUrl == ""
                && request.resource.data.twitterUrl == ""
                && request.resource.data.otherUrl == ""
                && request.resource.data.favoriteList == [""]
                && request.resource.data.feedbackList == [""];
            allow update: if isUserAuthenticated(userUid)
                && isValidUserInfo(request.resource.data);
        }
    }
}